import re
from aiogram import Router, types, F
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from database.methods import add_user, add_product_to_db, remove_product_from_db, get_products, get_product_by_id, \
    get_price_history
from utils.utils import fetch_product_details

router = Router()

async def set_bot_commands(bot):
    commands = [
        BotCommand(command="/start", description="–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    ]
    await bot.set_my_commands(commands)

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'), KeyboardButton(text='–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä')],
        [KeyboardButton(text='–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤'), KeyboardButton(text='–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω')],
        [KeyboardButton(text='–ü–æ–º–æ—â—å'), KeyboardButton(text='–û –±–æ—Ç–µ')]
    ],
    resize_keyboard=True
)

def inline_delete_button(product_id: int):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data=f'delete_{product_id}')]
        ]
    )

class PriceHistoryStates(StatesGroup):
    waiting_for_product_id = State()

class AddProductStates(StatesGroup):
    waiting_for_links = State()

class RemoveProductStates(StatesGroup):
    waiting_for_product_id = State()

@router.message(F.text == '/start')
async def send_welcome(message: types.Message):
    await add_user(message.from_user.id, message.from_user.username)
    await message.reply("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω! \n\n"
                        "üõçÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=main_menu)

@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def add_product_start(message: types.Message, state: FSMContext):
    await message.answer("üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
    await state.set_state(AddProductStates.waiting_for_links)

@router.message(AddProductStates.waiting_for_links)
async def process_links(message: types.Message, state: FSMContext):
    links = re.split(r'[,\s]+', message.text.strip())
    added_products = []

    for link in links:
        if not link.startswith("https://www.ozon.ru"):
            await message.answer(f"‚ùå –°—Å—ã–ª–∫–∞ {link} –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç Ozon. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—ë –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            continue

        details = fetch_product_details(link)
        if "error" in details:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏: {link}")
            continue

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ
        title = details.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        price_with_card = details.get("price_with_card", "N/A")
        price_no_card = details.get("price_no_card", price_with_card)
        price_original = details.get("price_original", price_with_card)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        product_id = await add_product_to_db(
            user_id=message.from_user.id,
            title=title,
            link=link,
            price_with_card=price_with_card,
            price_no_card=price_no_card,
            price_original=price_original
        )
        added_products.append((product_id, title, price_with_card, price_no_card, price_original))

    if added_products:
        response = "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n\n"
        for _, title, price_with_card, price_no_card, price_original in added_products:
            response += (
                f"üî∏ **–ù–∞–∑–≤–∞–Ω–∏–µ**: {title}\n"
                f"üí≥ **–¶–µ–Ω–∞ —Å –∫–∞—Ä—Ç–æ–π**: {price_with_card}\n"
                f"üíµ **–¶–µ–Ω–∞ –±–µ–∑ –∫–∞—Ä—Ç—ã**: {price_no_card}\n"
                f"üí≤ **–¶–µ–Ω–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏**: {price_original}\n\n"
            )
        await message.answer(response)
    else:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫–∏.")

    await state.clear()

@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def remove_product_start(message: types.Message, state: FSMContext):
    products = await get_products(message.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not products:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —Ç–æ–≤–∞—Ä—ã
        await message.answer("üì¶ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")  # –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏—Ö ID
    response = "–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã (ID - –Ω–∞–∑–≤–∞–Ω–∏–µ):\n\n"
    for product in products:
        product_id, _, _, title, _, _, _ = product  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
        response += f"üîπ **ID**: {product_id} - {title}\n"  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    await message.answer(response)
    await message.answer("üóëÔ∏è –í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞(–æ–≤), –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –∑–∞–ø—è—Ç—É—é.")  # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –≤–≤–æ–¥–∞ ID
    await state.set_state(RemoveProductStates.waiting_for_product_id)  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º FSM –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID

@router.message(RemoveProductStates.waiting_for_product_id)
async def process_remove_product(message: types.Message, state: FSMContext):
    ids = re.split(r'[,\s]+', message.text.strip())  # –†–∞–∑–¥–µ–ª—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ ID –ø–æ –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ –ø—Ä–æ–±–µ–ª—É
    deleted_products = []

    for id_str in ids:
        try:
            product_id = int(id_str)  # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å ID –≤ —á–∏—Å–ª–æ
            await message.answer(f"üóëÔ∏è –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä —Å ID **{product_id}**.")  # –û—Ç–ª–∞–¥–∫–∞

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            product = await get_product_by_id(product_id)  # –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –ø–æ ID

            if product:  # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω
                await remove_product_from_db(product_id)
                deleted_products.append(product_id)  # –î–æ–±–∞–≤–ª—è–µ–º ID –≤ —Å–ø–∏—Å–æ–∫ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            else:
                await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä —Å ID **{product_id}**. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤.")

        except ValueError:
            await message.answer(f"‚ö†Ô∏è ID '{id_str}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.")

    if deleted_products:
        await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä—ã —Å ID **{', '.join(map(str, deleted_products))}** —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
    else:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∏ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä.")

    await state.clear()

@router.message(F.text == "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤")
async def list_products(message: types.Message):
    products = await get_products(message.from_user.id)
    if not products:
        await message.answer("üì¶ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
        return

    response = "–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:\n\n"
    for product_id, user_id, link, title, price_with_card, price_no_card, price_original in products:
        response += (
            f"üîπ **ID**: {product_id}\n"
            f"üî∏ **–ù–∞–∑–≤–∞–Ω–∏–µ**: [{title}]({link})\n"
            f"üí≥ **–¶–µ–Ω–∞ —Å –∫–∞—Ä—Ç–æ–π**: {price_with_card}\n"
            f"üíµ **–¶–µ–Ω–∞ –±–µ–∑ –∫–∞—Ä—Ç—ã**: {price_no_card}\n"
            f"üí≤ **–¶–µ–Ω–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏**: {price_original}\n\n"
        )
    await message.answer(response, disable_web_page_preview=True)

@router.message(F.text == "–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω")
async def price_history_start(message: types.Message, state: FSMContext):
    products = await get_products(message.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not products:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —Ç–æ–≤–∞—Ä—ã
        await message.answer("üì¶ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")  # –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏—Ö ID
    response = "–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã (ID - –Ω–∞–∑–≤–∞–Ω–∏–µ):\n\n"
    for product in products:
        product_id, _, _, title, _, _, _ = product  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
        response += f"üîπ **ID**: {product_id} - {title}\n"  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    await message.answer(response)
    await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω.")  # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –≤–≤–æ–¥–∞ ID
    await state.set_state(PriceHistoryStates.waiting_for_product_id)  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º FSM –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID

@router.message(PriceHistoryStates.waiting_for_product_id)
async def process_price_history_request(message: types.Message, state: FSMContext):
    try:
        product_id = int(message.text.strip())
        await message.answer(f"üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–∞ —Å ID **{product_id}**.")  # –û—Ç–ª–∞–¥–∫–∞

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        product = await get_product_by_id(product_id)  # –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –ø–æ ID

        if product:  # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω
            price_history = await get_price_history(product_id)  # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
            if not price_history:
                await message.answer(f"‚ùå –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–∞ —Å ID **{product_id}**.")
                return

            response = "üìà –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω:\n\n"
            for record in price_history:
                _, _, datetime, price_with_card, price_no_card, price_original = record
                response += (
                    f"üìÖ **–î–∞—Ç–∞**: {datetime}\n"
                    f"üí≥ **–¶–µ–Ω–∞ —Å –∫–∞—Ä—Ç–æ–π**: {price_with_card}\n"
                    f"üíµ **–¶–µ–Ω–∞ –±–µ–∑ –∫–∞—Ä—Ç—ã**: {price_no_card}\n"
                    f"üí≤ **–¶–µ–Ω–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏**: {price_original}\n\n"
                )
            await message.answer(response)
        else:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä —Å ID **{product_id}**. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤.")

    except ValueError:
        await message.answer("‚ö†Ô∏è ID —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        await state.clear()

@router.message(F.text == "–ü–æ–º–æ—â—å")
async def help_message(message: types.Message):
    help_text = (
        "üí° *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*\n\n"
        "1. /start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞.\n"
        "2. –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã.\n"
        "3. –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.\n"
        "4. –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã.\n"
        "5. –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä - –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.\n"
        "6. –ü–æ–º–æ—â—å - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º."
    )
    await message.answer(help_text)

@router.message(F.text == "–û –±–æ—Ç–µ")
async def about_command(message: types.Message):
    await message.answer("‚ÑπÔ∏è **–û –±–æ—Ç–µ**:\n\n"
                         "–ë–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ —Ç–æ–≤–∞—Ä—ã —Å Ozon. "
                         "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")